<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>1) You are going to press create a new assignment button if you don't have any created assignments or want to create a new one. 

1.1) Before pressing create a new assignment button, you can observe the configurations and created assignments. 

1.2) If you choose an assignment that is shown in the table by selecting the row and pressing create a new assignment button you can view that assignment. 

2) Now you need to fill some areas in order to create an assignment, but for finishing that task we need to create a configuration or use an existing one. 

2.1) When you press choose a configuration it pops up a new page that will make you create an configuration, edit (Double Click Where You Want to Edit, After That Press Save Button) or use an existing one. 

2.3) After filling every space you are going to be directed at main page. 

3) As we talked about before you are going to select a row and after that press create a new assignment button. 

When entering an input, make sure to leave a blank in between values! For example: 

1 2 3 

4 5 2 

1 1 2 

The output is going to have -!- between values! For example: 

6.0 

 -!-  

40.0 

 -!-  

2.0 

4) In this page we have some buttons; 

4.1) Choose Students:  This button pops up a new screen to select zip files and extract them, but in the new page after selecting the zip files (You can add more than one at the same time by choosing the files while pressing "ctrl" or "shift") you need to press apply to confirm and press okay to return back to the assignment. 

4.2) Test All Students: This button tests all the student files that are chosen for that assignment. 

4.3) You can see the results in the bottom left table. 


</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAIB4AAAEAIACgDwAAFgAAACgAAAAgAAAAPAAAAAEAIAAAAAAAAA8AABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAK6urgANDQ0AGRkZCw4ODjcLCwtKCwsLSgsLC0oLCwtKCwsLSgsL
        C0oLCwtKCwsLSgsLC0oLCwtKCwsLSgsLC0oLCwtKCwsLSgsLC0oLCwtKCwsLSgsLC0oLCwtKCwsLSgsL
        C0oMDAxJDw8PLSAgIAUbGxsAAAAAAAAAAAAAAAAADg4OABQUFBcGBgajAgIC8wEBAf4BAQH+AQEB/gEB
        Af4BAQH+AQEB/gEBAf4BAQH+AQEB/gEBAf4BAQH+AQEB/gEBAf4BAQH+AQEB/gEBAf4BAQH+AQEB/gEB
        Af4BAQH+AQEB/gEBAf4CAgLqCAgIfiAgIAcZGRkAAAAAAEVFRQAAAAAACAgIewEBAf8DAwPYBQUFqgUF
        BakFBQWpBQUFqQUFBakFBQWpBQUFqQUFBakFBQWpBQUFqQUFBakFBQWpBQUFqQUFBakFBQWpBQUFqQUF
        BakFBQWpBQUFqQUFBakFBQWpBQUFrgICAukCAgL0DAwMSQQEBAAAAAAAMzMzADo6OgUFBQWyAQEB/woK
        CpQODg5YDg4OWg4ODloODg5aDg4OWg4ODloODg5aDg4OWg4ODloODg5aDg4OWg4ODloODg5aDg4OWg4O
        DloODg5aDg4OWg4ODloODg5aDg4OWg4ODloPDw9bBwcHtgAAAP8ICAh9AAAAALS0tAAyMjIAODg4BQUF
        BbQAAAD/AQEB/QEBAf0BAQH+AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEB
        Af8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/gEBAf0BAQH9AAAA/wkJCX8AAAAAsLCwADw8
        PAAAAAAACwsLTwUFBaECAgLiAAAA/wMDA9AEBASeBAQEnAQEBJwEBAScBAQEnAQEBJwEBAScBAQEnAQE
        BJwEBAScBAQEnAQEBJwEBAScBAQEnAQEBJwEBAScBAQEnAQEBKMCAgLiAAAA/wMDA84GBgaXDg4OMQUF
        BQDCwsIAAAAAAAAAAAAhISEAISEhCQQEBL4BAQH4Dw8PRBAQEDILCwtkCwsLZAsLC2QLCwtkCwsLZAsL
        C2QLCwtkCwsLZAsLC2QLCwtkCwsLZAsLC2QLCwtkCwsLZAsLC2QLCwtgFxcXHwkJCXUBAQH/BgYGiQAA
        AABoaGgAAAAAAAAAAAAAAAAAAAAAABsbGwAZGRkKAwMDwgICAvMTExNBBQUFvgEBAf8BAQH/AQEB/wEB
        Af8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8ICAiLDAwMZAEB
        Af8FBQWPAAAAAFlZWQAAAAAAAAAAAAAAAAAAAAAAGhoaABkZGQoDAwPCAgIC8xMTE0YDAwPNAQEB+AYG
        BqQGBgaSBgYGkwYGBpMGBgaTBgYGkwYGBpMGBgaTBgYGkwYGBpMGBgaTBgYGkwYGBpEFBQW3AAAA/wYG
        BpwMDAxlAQEB/wUFBY4AAAAAWVlZAAAAAAAAAAAAAAAAAAAAAAAaGhoAGRkZCgMDA8ICAgLzEhISRgMD
        A80CAgLrERERKBAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAAsL
        C1QBAQH/BgYGnAwMDGYBAQH/BQUFjwAAAABZWVkAAAAAAAAAAAAAAAAAAAAAABoaGgAZGRkKAwMDwgIC
        AvMSEhJGAwMDzQICAusREREoEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        //8=
</value>
  </data>
</root>